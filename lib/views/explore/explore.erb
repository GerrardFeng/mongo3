<div id="crumbs">
  <%= partial :'explore/crumbs' %>
</div>

<div id="landscape" class="borders"></div>

<div id="right" class="borders">
  <div id="info"></div>
  <span id="log"></span>  
</div>

<div id="details" class="borders overlay">
  <div id="wrap"></div>
</div>

<script>
  function remove_node( node_id ) {
    ht.op.removeNode( node_id, { type: 'fade:seq', duration: 1000, transition: Trans.Quart.easeOut } );
  }
  
  function center( node_id ) {
    ht.onClick( node_id, {
      Move:      { enable: true, offsetX: 30, offsetY: 5 } });
  }

  function morphit( id, json ) {
    ht.op.sum( eval( "(" + json + ")" ), 
    { 
      type:       'fade:con', 
      delay:      10, 
      hideLabels: false, 
      transition: Trans.Quart.easeOut
    });
    Log.write( "plotting..." );
  }

  $( function() {
    init_landscape();  
  });
    
  var Log = {
    log: false,
    write: function(text) {
      if ( ! this.log )
        this.log = $('span#log');
      this.log.show();
      this.log.html( text );
      this.log.css('left', ((500 - this.log.offsetWidth / 2) + 'px') );
      this.log.fadeOut( 5000 );
   }
  };

  function addEvent(obj, type, fn) {
      if (obj.addEventListener) obj.addEventListener(type, fn, false);
      else obj.attachEvent('on' + type, fn);
  };

  function init_landscape() {
    var tree = document.getElementById('landscape');
    var w = tree.offsetWidth - 100, h = tree.offsetHeight - 40;
    
    var canvas = new Canvas( 'tree', {
      'injectInto': 'landscape',
      'width':  w,
      'height': h
    });

    var style = document.getElementById('tree').style;
    style.marginLeft = "50px";
    style.marginTop  = "10px";
  
    //init Hypertree
    ht = new Hypertree( canvas, {
      Node: {
        type:        'circle',
        overridable: true,
        dim:         10,
        color:       "#7c8a61"
      },        
      Edge: {
        overridable: true,
        lineWidth:   1,
        color: "     #9a4c4c"
      },
        
      onBeforeCompute: function(node) {
        Log.write( "plotting..." );
      },
        
      onCreateLabel: function(domElement, node){
        domElement.innerHTML = truncate( unescape(node.name), 15 );
        
        $(domElement).attr('title', node.name );
        $(domElement).css('z-index', 10 );            
        $(domElement).tipTip( {maxWidth:'auto', edgeOffset:5} );
        
        
        addEvent(domElement, 'click', function () {
          var children_count = 0;
          for( var i in node.adjacencies )
             children_count += 1;

          // Bail if slave node 
          if ( node.data && node.data.slave )
          {
            Log.write( "Slave node detected. No action" );
            return;
          }
            
          if ( node.data && node.data.dyna && (children_count == 1 || node.data.master)  )
          {
            Log.write( "fetching new data..." );
            var url = "/explore/more_data/";
            url     += escape(node.data.path_ids) + "/" + escape(node.data.path_names) + "/";
            $.ajax( {
              dataType: 'script',
              type:     'GET',
              url:      url,
              success:  function() { node.data.dyna = false; }
            });
          }
          else
          {
             if( node.data.path_ids.split( '|' ).length < 4 ) {
               Log.write( "centering..." );               
               ht.onClick( node.id, {
                 Move:      { enable: true, offsetX: 30, offsetY: 5 },
                 onComplete: function() { 
                   $.ajax( {
                      dataType: 'script', 
                      type:     'GET', 
                      url:      "/explore/update_crumb/" + node.data.path_ids + "/" + node.data.path_names });
                  } });
              }
              else {
                Log.write( "loading collection..." );
                 $.ajax( {
                    dataType: 'script', 
                    type:     'GET', 
                    url:      "/explore/show/" + escape(node.data.path_ids) + "/" + escape(node.data.path_names)
                 });
              }
           }
      });
    },
              
    onBeforePlotLine: function(adj) {
      var nodeTo   = adj.nodeTo;
      var nodeFrom = adj.nodeFrom;
      if( (nodeFrom.data.slave && nodeTo.data.master) || (nodeFrom.data.master && nodeTo.data.slave) )
      {
        adj.data.$lineWidth = 3;
        adj.data.$color     = "#f00";
      }
    },
    
    onPlaceLabel: function(domElement, node){
      var item = $(domElement);

      item.css( 'class', "node level_#{node._depth}" );
  
      if (node._depth <= 1 ) {
        item.css('top', (parseInt(item.css('top')) + 10) + 'px' );
      }
      else if(node._depth == 2) {
        item.css('top', (parseInt(item.css('top')) + 10) + 'px' );
      } 
      else {
       }
      item.css( "left", (parseInt(item.css( 'left' )) - domElement.offsetWidth/2) + 'px');
    },
                
    onBeforePlotNode: function( node ) {
      level = node.data.path_ids.split("|").length;
  
      if( node.data.slave || node.data.master )
        return;
      
      if( level == 1 ) 
      {        
        node.data.$dim   = 10;
        node.data.$color = "#ff8a00";
      }
      else if( level == 2 ) {
        node.data.$dim   = 15;          
        node.data.$color = "#d200ff"
      }        
      else if( level == 3 ) {
        node.data.$dim   = 10;          
        node.data.$color = "#7891ff"
      }        
      else {
        node.data.$dim   = 10;          
        node.data.$color = "#7da241";
      }
    },
        
    onAfterCompute: function() {
      Log.write("done");
    } });
    
    ht.loadJSON( eval( <%=@root.to_json%> ) );
    ht.controller.onAfterCompute(); 
    ht.refresh();

    $('div#info').html( "<%=escape_javascript( partial( :'explore/node_info' ) )%>" )    
  }
</script>