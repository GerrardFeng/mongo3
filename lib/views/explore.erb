<div id="crumbs">
  <%= partial 'crumbs' %>
</div>

<div id="landscape"></div>

<div id="right">
  <div id="info"></div>
  <span id="log"></span>  
</div>

<div id="details" class="overlay">
  <div id="wrap"></div>
</div>

<script>
  function center( node_id ) {
    ht.onClick( node_id, {
      Move:      { enable: true, offsetX: 30, offsetY: 5 },
      onComplete: function() { update_info( node_id ); } });
  }

  function morphit( id, json ) {
    ht.op.sum( eval( "(" + json + ")" ), 
    { 
      type:       'fade:con', 
      delay:      10, 
      hideLabels: false, 
      transition: Trans.Quart.easeOut,
      onComplete: function() { update_info(id); } 
    });
    Log.write( "plotting..." );
  }

  $( function() {
    init_landscape();  
  });
    
  var Log = {
    log: false,
    write: function(text) {
      if ( ! this.log )
        this.log = $('span#log');
      this.log.show();
      this.log.html( text );
      this.log.css('left', ((500 - this.log.offsetWidth / 2) + 'px') );
      this.log.fadeOut( 5000 );
   }
  };

  function addEvent(obj, type, fn) {
      if (obj.addEventListener) obj.addEventListener(type, fn, false);
      else obj.attachEvent('on' + type, fn);
  };

  function init_landscape() {
    var tree = document.getElementById('landscape');
    var w = tree.offsetWidth - 100, h = tree.offsetHeight - 40;
    
    var canvas = new Canvas( 'tree', {
      'injectInto': 'landscape',
      'width':  w,
      'height': h
    });

    var style = document.getElementById('tree').style;
    style.marginLeft = "50px";
    style.marginTop  = "10px";
  
    //init Hypertree
    ht = new Hypertree( canvas, {
      Node: {
        type:        'circle',
        overridable: true,
        dim:         10,
        color:       "#7c8a61"
      },        
      Edge: {
        overridable: true,
        lineWidth:   1,
        color: "     #9a4c4c"
      },
        
      onBeforeCompute: function(node) {
        Log.write( "plotting..." );
      },
        
      onCreateLabel: function(domElement, node){
        domElement.innerHTML = truncate( unescape(node.name), 15 );
        
        addEvent(domElement, 'click', function () {
        var children_count = 0;
        for( var i in node.adjacencies )
           children_count += 1;

        if ( node.data && children_count == 1 && node.data.dyna )
        {
          Log.write( "fetching new data..." );
          var url = "/explore/more_data/";
          url     += node.data.path_ids + "/" + node.data.path_names + "/";
          $.ajax( {
            dataType: 'script',
            type:     'GET',
            url:      url
          });
        }
        else
        {
           if( node.data.path_ids.split( '|' ).length < 4 ) {
             Log.write( "centering..." );               
             ht.onClick( node.id, {
               Move:      { enable: true, offsetX: 30, offsetY: 5 },
               onComplete: function() { 
                 update_info( node.id ); 
                 $.ajax( {
                    dataType: 'script', 
                    type:     'GET', 
                    url:      "/explore/update_crumb/" + node.data.path_ids + "/" + node.data.path_names });
                } });
            }
            else {
              Log.write( "no more data" );
            }
         }
      });
    },
              
    onPlaceLabel: function(domElement, node){
      var item = $(domElement);

      item.css( 'class', "node level_#{node._depth}" );
  
      if (node._depth <= 1 ) {
        item.css('top', (parseInt(item.css('top')) + 10) + 'px' );
      }
      else if(node._depth == 2) {
        item.css('top', (parseInt(item.css('top')) + 10) + 'px' );
      } 
      else {
       }
      item.css( "left", (parseInt(item.css( 'left' )) - domElement.offsetWidth/2) + 'px');
    },
                
    onBeforePlotNode: function( node ) {
      level = node.data.path_ids.split("|").length;
  
      if( level == 1 ) 
      {        
        node.data.$dim   = 10;
        node.data.$color = "#ff8a00";
      }
      else if( level == 2 ) {
        node.data.$dim   = 15;          
        node.data.$color = "#d200ff"
      }        
      else if( level == 3 ) {
        node.data.$dim   = 10;          
        node.data.$color = "#7891ff"
      }        
      else {
        node.data.$dim   = 10;          
        node.data.$color = "#7da241";
      }
    },
        
    onAfterCompute: function() {
      Log.write("loaded");
    } });
    
    ht.loadJSON( eval( <%=@root.to_json%> ) );
    ht.controller.onAfterCompute(); 
    ht.refresh();
    
    if( '<%=@center%>'.length )
      update_info( '<%=@center%>' );
    else
      update_info( 'home' );
  }

  function update_info(node_id)
  {
console.log( "NODE " + node_id );    
    var node = null;  
    if( node_id )
      node = Graph.Util.getNode(ht.graph, node_id);                                        
    else
      node = Graph.Util.getClosestNodeToOrigin(ht.graph, "pos");

console.log( "ACTUAL " + node.name + " " + node.id + " " + node.data.path_ids );
  
    var html    = "";
    var depth   = node.data.path_ids.split( '|' ).length
    var legends = ['', 'environments', 'databases', 'collections']
      
    var children      = [];
    var children_hash = {};
    Graph.Util.eachAdjacency( node, function(adj) {      
      child = adj.nodeTo;
      if( parent ) {
        if( child.name != parent.name ) {
          children_hash[child.name] = child;
          children.push( child.name );
        }
      }
      else {
        children_hash[child.name] = child;
        children.push( child.name );
      }
    });
    children = children.sort();
  
    html += "<span class=\"what\">" + legends[depth] + "(" + children.length + ")</span>";  
    html += "<p style='padding:5px 10px;text-align:left;color:#c1c1c1'>";
  
    var buff = "<ul style='font-size:0.4em'>";  
    for( var i in children ) {
      var node = children_hash[children[i]];
      buff += "<li>";
      buff += make_link( node );
      buff += "</li>";
    }  
    html += "</ul>" + buff;
    html += "</p>";
    $('div#info').html( html );
  
    $('a.info[rel]').overlay( 
      { top:    '15%',
        expose: '#1c1c1c',
        onBeforeLoad: function() {
          var wrap = this.getContent().find( 'div#wrap' );
          wrap.load( this.getTrigger().attr( 'href' ) );
        }
      });   
  }

  function make_link( node )
  {
    return "<a rel=\"div#details\" class=\"info\" href=\"/explore/show/" + node.data.path_ids + "/" + node.data.path_names + "\">" + node.name + "</a>";  
  }

  function refresh_data( url, path, name )
  {
    $.ajax( {
      dataType: 'script', 
      type:     'GET', 
      url:      url + "/" + path + "/" + name
    });
  }
</script>